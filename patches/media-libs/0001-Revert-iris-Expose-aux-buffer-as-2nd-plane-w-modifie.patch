From 619b6655128130f7b7e2c390a116c32556d1440a Mon Sep 17 00:00:00 2001
From: Mike Lothian <mike@fireburn.co.uk>
Date: Tue, 27 Aug 2019 08:26:45 +0100
Subject: [PATCH] Revert "iris: Expose aux buffer as 2nd plane w/modifiers"

This reverts commit 0f5be81eddfbdcb39a0de10afac2b2ec74790e70.
---
 src/gallium/drivers/iris/iris_resource.c | 33 +++++++-----------------
 1 file changed, 10 insertions(+), 23 deletions(-)

diff --git a/src/gallium/drivers/iris/iris_resource.c b/src/gallium/drivers/iris/iris_resource.c
index a8d0291862e..3b91cb95d04 100644
--- a/src/gallium/drivers/iris/iris_resource.c
+++ b/src/gallium/drivers/iris/iris_resource.c
@@ -169,7 +169,7 @@ iris_query_dmabuf_modifiers(struct pipe_screen *pscreen,
       DRM_FORMAT_MOD_LINEAR,
       I915_FORMAT_MOD_X_TILED,
       I915_FORMAT_MOD_Y_TILED,
-      I915_FORMAT_MOD_Y_TILED_CCS,
+      // XXX: (broken) I915_FORMAT_MOD_Y_TILED_CCS,
    };
 
    int supported_mods = 0;
@@ -1078,30 +1078,17 @@ iris_resource_get_handle(struct pipe_screen *pscreen,
                          unsigned usage)
 {
    struct iris_resource *res = (struct iris_resource *)resource;
-   bool mod_with_aux =
-      res->mod_info && res->mod_info->aux_usage != ISL_AUX_USAGE_NONE;
 
-   /* Disable aux usage if explicit flush not set and this is the first time
-    * we are dealing with this resource and the resource was not created with
-    * a modifier with aux.
+   /* Disable aux usage if explicit flush not set and this is the
+    * first time we are dealing with this resource.
     */
-   if (!mod_with_aux &&
-       (!(usage & PIPE_HANDLE_USAGE_EXPLICIT_FLUSH) && res->aux.usage != 0) &&
-       p_atomic_read(&resource->reference.count) == 1) {
+   if ((!(usage & PIPE_HANDLE_USAGE_EXPLICIT_FLUSH) && res->aux.usage != 0)) {
+      if (p_atomic_read(&resource->reference.count) == 1)
          iris_resource_disable_aux(res);
    }
 
-   struct iris_bo *bo;
-   if (mod_with_aux && whandle->plane > 0) {
-      assert(res->aux.bo);
-      bo = res->aux.bo;
-      whandle->stride = res->aux.surf.row_pitch_B;
-      whandle->offset = res->aux.offset;
-   } else {
-      /* If this is a buffer, stride should be 0 - no need to special case */
-      whandle->stride = res->surf.row_pitch_B;
-      bo = res->bo;
-   }
+   /* If this is a buffer, stride should be 0 - no need to special case */
+   whandle->stride = res->surf.row_pitch_B;
    whandle->modifier =
       res->mod_info ? res->mod_info->modifier
                     : tiling_to_modifier(res->bo->tiling_mode);
@@ -1119,12 +1106,12 @@ iris_resource_get_handle(struct pipe_screen *pscreen,
 
    switch (whandle->type) {
    case WINSYS_HANDLE_TYPE_SHARED:
-      return iris_bo_flink(bo, &whandle->handle) == 0;
+      return iris_bo_flink(res->bo, &whandle->handle) == 0;
    case WINSYS_HANDLE_TYPE_KMS:
-      whandle->handle = iris_bo_export_gem_handle(bo);
+      whandle->handle = iris_bo_export_gem_handle(res->bo);
       return true;
    case WINSYS_HANDLE_TYPE_FD:
-      return iris_bo_export_dmabuf(bo, (int *) &whandle->handle) == 0;
+      return iris_bo_export_dmabuf(res->bo, (int *) &whandle->handle) == 0;
    }
 
    return false;
-- 
2.23.0

