From 5095ad837b78e04fdc3748af94fb0f92fca1eebc Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 14:24:12 +0800
Subject: [PATCH 1/8] mapi: Remove unused ENTRY_CURRENT_TABLE_GET

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/entry.c | 7 -------
 1 file changed, 7 deletions(-)

diff --git a/src/mapi/entry.c b/src/mapi/entry.c
index a2afab6ddc69..a4f97906c796 100644
--- a/src/mapi/entry.c
+++ b/src/mapi/entry.c
@@ -39,13 +39,6 @@
 /* define macros for use by assembly dispatchers */
 #define ENTRY_CURRENT_TABLE U_STRINGIFY(u_current_table)
 
-/* in bridge mode, mapi is a user of glapi */
-#ifdef MAPI_MODE_BRIDGE
-#define ENTRY_CURRENT_TABLE_GET "_glapi_get_dispatch"
-#else
-#define ENTRY_CURRENT_TABLE_GET U_STRINGIFY(u_current_get_table_internal)
-#endif
-
 /* REALLY_INITIAL_EXEC implies __GLIBC__ */
 #if defined(USE_X86_ASM) && defined(REALLY_INITIAL_EXEC)
 #include "entry_x86_tls.h"
-- 
GitLab


From 803bbac7f9347961bb14376aaf1799c61179329d Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 16:03:27 +0800
Subject: [PATCH 2/8] mapi: Remove usage of _glapi_check_multithread and
 _glapi_destroy_multithread

They are empty stub functions now so have no need call to them

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/gallium/frontends/wgl/stw_device.c | 5 -----
 src/glx/glxcurrent.c                   | 2 --
 src/mesa/main/context.c                | 5 -----
 3 files changed, 12 deletions(-)

diff --git a/src/gallium/frontends/wgl/stw_device.c b/src/gallium/frontends/wgl/stw_device.c
index c0a6cb17cc76..fd7d7add461f 100644
--- a/src/gallium/frontends/wgl/stw_device.c
+++ b/src/gallium/frontends/wgl/stw_device.c
@@ -254,11 +254,6 @@ stw_cleanup(void)
 
    stw_dev->screen->destroy(stw_dev->screen);
 
-   /* glapi is statically linked: we can call the local destroy function. */
-#ifdef _GLAPI_NO_EXPORTS
-   _glapi_destroy_multithread();
-#endif
-
    stw_tls_cleanup();
 
    util_dynarray_fini(&stw_dev->pixelformats);
diff --git a/src/glx/glxcurrent.c b/src/glx/glxcurrent.c
index b59de7994679..e14434f79e6b 100644
--- a/src/glx/glxcurrent.c
+++ b/src/glx/glxcurrent.c
@@ -133,8 +133,6 @@ MakeContextCurrent(Display * dpy, GLXDrawable draw,
       return GL_FALSE;
    }
 
-   _glapi_check_multithread();
-
    __glXLock();
    if (oldGC == gc &&
        gc->currentDrawable == draw && gc->currentReadable == read) {
diff --git a/src/mesa/main/context.c b/src/mesa/main/context.c
index 21f53d489ede..5b5850bc49ba 100644
--- a/src/mesa/main/context.c
+++ b/src/mesa/main/context.c
@@ -1493,11 +1493,6 @@ _mesa_make_current( struct gl_context *newCtx,
       st_glFlush(curCtx, 0);
    }
 
-   /* Call this periodically to detect when the user has begun using
-    * GL rendering from multiple threads.
-    */
-   _glapi_check_multithread();
-
    if (!newCtx) {
       _glapi_set_dispatch(NULL);  /* none current */
       /* We need old ctx to correctly release Draw/ReadBuffer
-- 
GitLab


From 5572d94ee6d386b9e7d19cfbc8b857f9491095d5 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 14:50:59 +0800
Subject: [PATCH 3/8] mapi: Remove reference to unused _gl_DispatchTSD

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/u_current.h | 2 --
 1 file changed, 2 deletions(-)

diff --git a/src/mapi/u_current.h b/src/mapi/u_current.h
index b5a4310044b6..bcabdc966f3f 100644
--- a/src/mapi/u_current.h
+++ b/src/mapi/u_current.h
@@ -15,8 +15,6 @@
 #define u_current_get_table_internal _glapi_get_dispatch
 #define u_current_get_context_internal _glapi_get_context
 
-#define u_current_table_tsd _gl_DispatchTSD
-
 #else /* MAPI_MODE_UTIL || MAPI_MODE_GLAPI || MAPI_MODE_BRIDGE */
 
 struct _glapi_table;
-- 
GitLab


From cf321e4df7d04bfa35ccda206c9e1ec4922ef4eb Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 15:54:59 +0800
Subject: [PATCH 4/8] mapi: Move shared _glapi_set_context and
 _glapi_set_dispatch into u_current.c

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/entry.c       |  6 +-----
 src/mapi/glapi/glapi.c | 18 ++++--------------
 src/mapi/mapi_glapi.c  | 18 ++++--------------
 src/mapi/u_current.c   | 24 ++++++++++++------------
 src/mapi/u_current.h   | 33 ---------------------------------
 5 files changed, 21 insertions(+), 78 deletions(-)

diff --git a/src/mapi/entry.c b/src/mapi/entry.c
index a4f97906c796..5405336f9dd8 100644
--- a/src/mapi/entry.c
+++ b/src/mapi/entry.c
@@ -37,7 +37,7 @@
 #define U_STRINGIFY(x) _U_STRINGIFY(x)
 
 /* define macros for use by assembly dispatchers */
-#define ENTRY_CURRENT_TABLE U_STRINGIFY(u_current_table)
+#define ENTRY_CURRENT_TABLE U_STRINGIFY(_glapi_tls_Dispatch)
 
 /* REALLY_INITIAL_EXEC implies __GLIBC__ */
 #if defined(USE_X86_ASM) && defined(REALLY_INITIAL_EXEC)
@@ -51,11 +51,7 @@
 static inline const struct _glapi_table *
 entry_current_get(void)
 {
-#ifdef MAPI_MODE_BRIDGE
    return GET_DISPATCH();
-#else
-   return u_current_get_table_internal();
-#endif
 }
 
 /* C version of the public entries */
diff --git a/src/mapi/glapi/glapi.c b/src/mapi/glapi/glapi.c
index 1c0a75a8b1c5..44af484a377e 100644
--- a/src/mapi/glapi/glapi.c
+++ b/src/mapi/glapi/glapi.c
@@ -29,8 +29,10 @@
 #include "u_current.h"
 
 /*
- * Global variables, _glapi_get_context, and _glapi_get_dispatch are defined in
- * u_current.c.
+ * _glapi_tls_Dispatch, _glapi_tls_Context,
+ * _glapi_set_context, _glapi_get_context,
+ * _glapi_set_dispatch, and _glapi_get_dispatch
+ * are defined in u_current.c.
  */
 
 /* not used, but defined for compatibility */
@@ -46,15 +48,3 @@ void
 _glapi_check_multithread(void)
 {
 }
-
-void
-_glapi_set_context(void *context)
-{
-   u_current_set_context((const void *) context);
-}
-
-void
-_glapi_set_dispatch(struct _glapi_table *dispatch)
-{
-   u_current_set_table((const struct _glapi_table *) dispatch);
-}
diff --git a/src/mapi/mapi_glapi.c b/src/mapi/mapi_glapi.c
index b44c64b018fb..d89c94d9547d 100644
--- a/src/mapi/mapi_glapi.c
+++ b/src/mapi/mapi_glapi.c
@@ -34,8 +34,10 @@
 #include "stub.h"
 
 /*
- * Global variables, _glapi_get_context, and _glapi_get_dispatch are defined in
- * u_current.c.
+ * _glapi_tls_Dispatch, _glapi_tls_Context,
+ * _glapi_set_context, _glapi_get_context,
+ * _glapi_set_dispatch, and _glapi_get_dispatch
+ * are defined in u_current.c.
  */
 
 /* not used, but defined for compatibility */
@@ -52,18 +54,6 @@ _glapi_check_multithread(void)
 {
 }
 
-void
-_glapi_set_context(void *context)
-{
-   u_current_set_context((const void *) context);
-}
-
-void
-_glapi_set_dispatch(struct _glapi_table *dispatch)
-{
-   u_current_set_table((const struct _glapi_table *) dispatch);
-}
-
 /**
  * Return size of dispatch table struct as number of functions (or
  * slots).
diff --git a/src/mapi/u_current.c b/src/mapi/u_current.c
index 39db11b54df1..ac7b8ab67898 100644
--- a/src/mapi/u_current.c
+++ b/src/mapi/u_current.c
@@ -94,10 +94,10 @@ extern void (*__glapi_noop_table[])(void);
  */
 /*@{*/
 
-__THREAD_INITIAL_EXEC struct _glapi_table *u_current_table
-    = (struct _glapi_table *) table_noop_array;
+__THREAD_INITIAL_EXEC struct _glapi_table *_glapi_tls_Dispatch
+   = (struct _glapi_table *) table_noop_array;
 
-__THREAD_INITIAL_EXEC void *u_current_context;
+__THREAD_INITIAL_EXEC void *_glapi_tls_Context;
 
 /*@}*/
 
@@ -107,9 +107,9 @@ __THREAD_INITIAL_EXEC void *u_current_context;
  * void from the real context pointer type.
  */
 void
-u_current_set_context(const void *ptr)
+_glapi_set_context(void *ptr)
 {
-   u_current_context = (void *) ptr;
+   _glapi_tls_Context = ptr;
 }
 
 /**
@@ -118,9 +118,9 @@ u_current_set_context(const void *ptr)
  * void to the real context pointer type.
  */
 void *
-u_current_get_context_internal(void)
+_glapi_get_context(void)
 {
-   return u_current_context;
+   return _glapi_tls_Context;
 }
 
 /**
@@ -129,21 +129,21 @@ u_current_get_context_internal(void)
  * table (__glapi_noop_table).
  */
 void
-u_current_set_table(const struct _glapi_table *tbl)
+_glapi_set_dispatch(struct _glapi_table *tbl)
 {
    stub_init_once();
 
    if (!tbl)
-      tbl = (const struct _glapi_table *) table_noop_array;
+      tbl = (struct _glapi_table *) table_noop_array;
 
-   u_current_table = (struct _glapi_table *) tbl;
+   _glapi_tls_Dispatch = tbl;
 }
 
 /**
  * Return pointer to current dispatch table for calling thread.
  */
 struct _glapi_table *
-u_current_get_table_internal(void)
+_glapi_get_dispatch(void)
 {
-   return u_current_table;
+   return _glapi_tls_Dispatch;
 }
diff --git a/src/mapi/u_current.h b/src/mapi/u_current.h
index bcabdc966f3f..15ef61ce8214 100644
--- a/src/mapi/u_current.h
+++ b/src/mapi/u_current.h
@@ -1,39 +1,6 @@
 #ifndef _U_CURRENT_H_
 #define _U_CURRENT_H_
 
-#include "util/macros.h"
-
-
-#if defined(MAPI_MODE_UTIL) || defined(MAPI_MODE_GLAPI) || \
-    defined(MAPI_MODE_BRIDGE)
-
 #include "glapi/glapi.h"
 
-#define u_current_table _glapi_tls_Dispatch
-#define u_current_context _glapi_tls_Context
-
-#define u_current_get_table_internal _glapi_get_dispatch
-#define u_current_get_context_internal _glapi_get_context
-
-#else /* MAPI_MODE_UTIL || MAPI_MODE_GLAPI || MAPI_MODE_BRIDGE */
-
-struct _glapi_table;
-
-extern __THREAD_INITIAL_EXEC struct _glapi_table *u_current_table;
-extern __THREAD_INITIAL_EXEC void *u_current_context;
-
-#endif /* MAPI_MODE_UTIL || MAPI_MODE_GLAPI || MAPI_MODE_BRIDGE */
-
-void
-u_current_set_table(const struct _glapi_table *tbl);
-
-_GLAPI_EXPORT struct _glapi_table *
-u_current_get_table_internal(void);
-
-void
-u_current_set_context(const void *ptr);
-
-_GLAPI_EXPORT void *
-u_current_get_context_internal(void);
-
 #endif /* _U_CURRENT_H_ */
-- 
GitLab


From ce10d519027d2d80e8d7089794cb438b489bd492 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 16:11:42 +0800
Subject: [PATCH 5/8] mapi: Move shared stub into u_current.c

These stub are:
_glapi_Dispatch
_glapi_Context
_glapi_destroy_multithread
_glapi_check_multithread

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/glapi/glapi.c | 15 ++-------------
 src/mapi/mapi_glapi.c  | 16 ++--------------
 src/mapi/u_current.c   | 16 ++++++++++++++++
 3 files changed, 20 insertions(+), 27 deletions(-)

diff --git a/src/mapi/glapi/glapi.c b/src/mapi/glapi/glapi.c
index 44af484a377e..b8479d2e27f8 100644
--- a/src/mapi/glapi/glapi.c
+++ b/src/mapi/glapi/glapi.c
@@ -29,22 +29,11 @@
 #include "u_current.h"
 
 /*
+ * _glapi_Dispatch, _glapi_Context
  * _glapi_tls_Dispatch, _glapi_tls_Context,
  * _glapi_set_context, _glapi_get_context,
+ * _glapi_destroy_multithread, _glapi_check_multithread
  * _glapi_set_dispatch, and _glapi_get_dispatch
  * are defined in u_current.c.
  */
 
-/* not used, but defined for compatibility */
-const struct _glapi_table *_glapi_Dispatch;
-const void *_glapi_Context;
-
-void
-_glapi_destroy_multithread(void)
-{
-}
-
-void
-_glapi_check_multithread(void)
-{
-}
diff --git a/src/mapi/mapi_glapi.c b/src/mapi/mapi_glapi.c
index d89c94d9547d..216a6987018c 100644
--- a/src/mapi/mapi_glapi.c
+++ b/src/mapi/mapi_glapi.c
@@ -34,26 +34,14 @@
 #include "stub.h"
 
 /*
+ * _glapi_Dispatch, _glapi_Context
  * _glapi_tls_Dispatch, _glapi_tls_Context,
  * _glapi_set_context, _glapi_get_context,
+ * _glapi_destroy_multithread, _glapi_check_multithread
  * _glapi_set_dispatch, and _glapi_get_dispatch
  * are defined in u_current.c.
  */
 
-/* not used, but defined for compatibility */
-const struct _glapi_table *_glapi_Dispatch;
-const void *_glapi_Context;
-
-void
-_glapi_destroy_multithread(void)
-{
-}
-
-void
-_glapi_check_multithread(void)
-{
-}
-
 /**
  * Return size of dispatch table struct as number of functions (or
  * slots).
diff --git a/src/mapi/u_current.c b/src/mapi/u_current.c
index ac7b8ab67898..d0c48d89300c 100644
--- a/src/mapi/u_current.c
+++ b/src/mapi/u_current.c
@@ -99,8 +99,24 @@ __THREAD_INITIAL_EXEC struct _glapi_table *_glapi_tls_Dispatch
 
 __THREAD_INITIAL_EXEC void *_glapi_tls_Context;
 
+/* not used, but defined for compatibility */
+const struct _glapi_table *_glapi_Dispatch;
+const void *_glapi_Context;
+
 /*@}*/
 
+/* not used, but defined for compatibility */
+void
+_glapi_destroy_multithread(void)
+{
+}
+
+/* not used, but defined for compatibility */
+void
+_glapi_check_multithread(void)
+{
+}
+
 /**
  * Set the current context pointer for this thread.
  * The context pointer is an opaque type which should be cast to
-- 
GitLab


From 42f4fd52c3e7d2c7e92e28c1b613181d1b89d6f4 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 16:48:47 +0800
Subject: [PATCH 6/8] mapi: Access _glapi_tls_Dispatch directly without need of
 macro

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/entry.c             |  3 ---
 src/mapi/entry_ppc64le_tls.h | 10 +++++-----
 src/mapi/entry_x86-64_tls.h  |  6 +++---
 src/mapi/entry_x86_tls.h     |  4 ++--
 4 files changed, 10 insertions(+), 13 deletions(-)

diff --git a/src/mapi/entry.c b/src/mapi/entry.c
index 5405336f9dd8..b862175dff62 100644
--- a/src/mapi/entry.c
+++ b/src/mapi/entry.c
@@ -36,9 +36,6 @@
 #define _U_STRINGIFY(x) #x
 #define U_STRINGIFY(x) _U_STRINGIFY(x)
 
-/* define macros for use by assembly dispatchers */
-#define ENTRY_CURRENT_TABLE U_STRINGIFY(_glapi_tls_Dispatch)
-
 /* REALLY_INITIAL_EXEC implies __GLIBC__ */
 #if defined(USE_X86_ASM) && defined(REALLY_INITIAL_EXEC)
 #include "entry_x86_tls.h"
diff --git a/src/mapi/entry_ppc64le_tls.h b/src/mapi/entry_ppc64le_tls.h
index e09a1178a06b..d204dd919a19 100644
--- a/src/mapi/entry_ppc64le_tls.h
+++ b/src/mapi/entry_ppc64le_tls.h
@@ -55,9 +55,9 @@ __asm__(".text\n"
    "  .localentry  " func ", .-" func "\n\t"
 
 #define STUB_ASM_CODE(slot)                                     \
-   "  addis  11, 2, " ENTRY_CURRENT_TABLE "@got@tprel@ha\n\t"   \
-   "  ld     11, " ENTRY_CURRENT_TABLE "@got@tprel@l(11)\n\t"   \
-   "  add    11, 11," ENTRY_CURRENT_TABLE "@tls\n\t"            \
+   "  addis  11, 2, _glapi_tls_Dispatch@got@tprel@ha\n\t"   \
+   "  ld     11, _glapi_tls_Dispatch@got@tprel@l(11)\n\t"   \
+   "  add    11, 11,_glapi_tls_Dispatch@tls\n\t"            \
    "  ld     11, 0(11)\n\t"                                     \
    "  ld     12, " slot "*8(11)\n\t"                            \
    "  mtctr  12\n\t"                                            \
@@ -88,8 +88,8 @@ entry_get_public(int slot)
 __asm__(".text\n");
 
 __asm__("ppc64le_dispatch_tls:\n\t"
-        "  addis  3, 2, " ENTRY_CURRENT_TABLE "@got@tprel@ha\n\t"
-        "  ld     3, " ENTRY_CURRENT_TABLE "@got@tprel@l(3)\n\t"
+        "  addis  3, 2, _glapi_tls_Dispatch@got@tprel@ha\n\t"
+        "  ld     3, _glapi_tls_Dispatch@got@tprel@l(3)\n\t"
         "  blr\n"
         );
 
diff --git a/src/mapi/entry_x86-64_tls.h b/src/mapi/entry_x86-64_tls.h
index aebe4cf4a3f2..f2fea5189634 100644
--- a/src/mapi/entry_x86-64_tls.h
+++ b/src/mapi/entry_x86-64_tls.h
@@ -51,7 +51,7 @@ __asm__(".text\n"
 
 #define STUB_ASM_CODE(slot)                              \
    ENDBR                                                 \
-   "movq " ENTRY_CURRENT_TABLE "@GOTTPOFF(%rip), %rax\n\t"  \
+   "movq _glapi_tls_Dispatch@GOTTPOFF(%rip), %rax\n\t"  \
    "movq %fs:(%rax), %r11\n\t"                           \
    "jmp *(8 * " slot ")(%r11)"
 
@@ -59,7 +59,7 @@ __asm__(".text\n"
 
 #define STUB_ASM_CODE(slot)                              \
    ENDBR                                                 \
-   "movq " ENTRY_CURRENT_TABLE "@GOTTPOFF(%rip), %rax\n\t"  \
+   "movq _glapi_tls_Dispatch@GOTTPOFF(%rip), %rax\n\t"  \
    "movl %fs:(%rax), %r11d\n\t"                          \
    "movl 4*" slot "(%r11d), %r11d\n\t"                   \
    "jmp *%r11"
@@ -121,7 +121,7 @@ entry_generate(int slot)
    char *code;
    mapi_func entry;
 
-   __asm__("movq " ENTRY_CURRENT_TABLE "@GOTTPOFF(%%rip), %0"
+   __asm__("movq _glapi_tls_Dispatch@GOTTPOFF(%%rip), %0"
            : "=r" (addr));
    if ((addr >> 32) != 0xffffffff)
       return NULL;
diff --git a/src/mapi/entry_x86_tls.h b/src/mapi/entry_x86_tls.h
index bdaa97374ba6..9829968c0a97 100644
--- a/src/mapi/entry_x86_tls.h
+++ b/src/mapi/entry_x86_tls.h
@@ -48,7 +48,7 @@ __asm__("x86_current_tls:\n\t"
         "1:\n\t"
         "popl %eax\n\t"
 	"addl $_GLOBAL_OFFSET_TABLE_+[.-1b], %eax\n\t"
-	"movl " ENTRY_CURRENT_TABLE "@GOTNTPOFF(%eax), %eax\n\t"
+	"movl _glapi_tls_Dispatch@GOTNTPOFF(%eax), %eax\n\t"
 	"ret");
 
 #ifndef GLX_X86_READONLY_TEXT
@@ -70,7 +70,7 @@ __asm__(".balign 16\n"
    "1:\n\t"                                                 \
    "popl %eax\n\t"                                          \
    "addl $_GLOBAL_OFFSET_TABLE_+[.-1b], %eax\n\t"           \
-   "movl " ENTRY_CURRENT_TABLE "@GOTNTPOFF(%eax), %eax\n\t" \
+   "movl _glapi_tls_Dispatch@GOTNTPOFF(%eax), %eax\n\t" \
    "movl %gs:(%eax), %eax\n\t"                              \
    "jmp *(4 * " slot ")(%eax)"
 
-- 
GitLab


From f42603455fda329476308c2cbe4f341364117e7e Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Sat, 25 Jun 2022 13:34:37 +0800
Subject: [PATCH 7/8] docs: Remove document about USE_ELF_TLS

Revise dispatch document

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
Reviewed-by: Emil Velikov <emil.l.velikov@gmail.com>
---
 docs/dispatch.rst | 69 ++++++++---------------------------------------
 1 file changed, 11 insertions(+), 58 deletions(-)

diff --git a/docs/dispatch.rst b/docs/dispatch.rst
index 2bdf732d2921..c2942bf90aba 100644
--- a/docs/dispatch.rst
+++ b/docs/dispatch.rst
@@ -78,9 +78,8 @@ The problem with this simple implementation is the large amount of
 overhead that it adds to every GL function call.
 
 In a multithreaded environment, a naive implementation of
-``GET_DISPATCH`` involves a call to ``pthread_getspecific`` or a similar
-function. Mesa provides a wrapper function called
-``_glapi_get_dispatch`` that is used by default.
+``GET_DISPATCH()`` involves a call to ``_glapi_get_dispatch()`` or
+``_glapi_tls_Dispatch``.
 
 3. Optimizations
 ----------------
@@ -90,48 +89,15 @@ performance hit imposed by GL dispatch. This section describes these
 optimizations. The benefits of each optimization and the situations
 where each can or cannot be used are listed.
 
-3.1. Dual dispatch table pointers
-~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
-
-The vast majority of OpenGL applications use the API in a single
-threaded manner. That is, the application has only one thread that makes
-calls into the GL. In these cases, not only do the calls to
-``pthread_getspecific`` hurt performance, but they are completely
-unnecessary! It is possible to detect this common case and avoid these
-calls.
-
-Each time a new dispatch table is set, Mesa examines and records the ID
-of the executing thread. If the same thread ID is always seen, Mesa
-knows that the application is, from OpenGL's point of view, single
-threaded.
-
-As long as an application is single threaded, Mesa stores a pointer to
-the dispatch table in a global variable called ``_glapi_Dispatch``. The
-pointer is also stored in a per-thread location via
-``pthread_setspecific``. When Mesa detects that an application has
-become multithreaded, ``NULL`` is stored in ``_glapi_Dispatch``.
-
-Using this simple mechanism the dispatch functions can detect the
-multithreaded case by comparing ``_glapi_Dispatch`` to ``NULL``. The
-resulting implementation of ``GET_DISPATCH`` is slightly more complex,
-but it avoids the expensive ``pthread_getspecific`` call in the common
-case.
-
-.. code-block:: c
-   :caption: Improved ``GET_DISPATCH`` Implementation
-
-   #define GET_DISPATCH() \
-       (_glapi_Dispatch != NULL) \
-           ? _glapi_Dispatch : pthread_getspecific(&_glapi_Dispatch_key)
-
-3.2. ELF TLS
+3.1. ELF TLS
 ~~~~~~~~~~~~
 
 Starting with the 2.4.20 Linux kernel, each thread is allocated an area
 of per-thread, global storage. Variables can be put in this area using
-some extensions to GCC. By storing the dispatch table pointer in this
-area, the expensive call to ``pthread_getspecific`` and the test of
-``_glapi_Dispatch`` can be avoided.
+some extensions to GCC that called `ELF TLS`. By storing the dispatch table
+pointer in this area, the expensive call to ``pthread_getspecific`` and
+the test of ``_glapi_Dispatch`` can be avoided. As we don't support for
+Linux kernel earlier than 2.4.20, so we can always using `ELF TLS`.
 
 The dispatch table pointer is stored in a new variable called
 ``_glapi_tls_Dispatch``. A new variable name is used so that a single
@@ -147,17 +113,7 @@ reference.
 
    #define GET_DISPATCH() _glapi_tls_Dispatch
 
-Use of this path is controlled by the preprocessor define
-``USE_ELF_TLS``. Any platform capable of using ELF TLS should use this
-as the default dispatch method.
-
-Windows has a similar concept, and beginning with Windows Vista, shared
-libraries can take advantage of compiler-assisted TLS. This TLS data
-has no fixed size and does not compete with API-based TLS (``TlsAlloc``)
-for the limited number of slots available there, and so ``USE_ELF_TLS`` can
-be used on Windows too, even though it's not truly ELF.
-
-3.3. Assembly Language Dispatch Stubs
+3.2. Assembly Language Dispatch Stubs
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 Many platforms have difficulty properly optimizing the tail-call in the
@@ -177,20 +133,17 @@ different methods that can be used:
    environments.
 #. Using ``_glapi_Dispatch`` and ``_glapi_get_dispatch`` in
    multithreaded environments.
-#. Using ``_glapi_Dispatch`` and ``pthread_getspecific`` in
-   multithreaded environments.
 #. Using ``_glapi_tls_Dispatch`` directly in TLS enabled multithreaded
    environments.
 
 People wishing to implement assembly stubs for new platforms should
-focus on #4 if the new platform supports TLS. Otherwise, implement #2
-followed by #3. Environments that do not support multithreading are
+focus on #3 if the new platform supports TLS. Otherwise implement #2.
+Environments that do not support multithreading are
 uncommon and not terribly relevant.
 
 Selection of the dispatch table pointer access method is controlled by a
 few preprocessor defines.
 
--  If ``USE_ELF_TLS`` is defined, method #3 is used.
 -  If ``HAVE_PTHREAD`` is defined, method #2 is used.
 -  If none of the preceding are defined, method #1 is used.
 
@@ -236,7 +189,7 @@ dispatch functions from being built.
 
 .. _fixedsize:
 
-3.4. Fixed-Length Dispatch Stubs
+3.3. Fixed-Length Dispatch Stubs
 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
 
 To implement ``glXGetProcAddress``, Mesa stores a table that associates
-- 
GitLab


From d9753e1d59379989cc93de45010f817ed3321e27 Mon Sep 17 00:00:00 2001
From: Yonggang Luo <luoyonggang@gmail.com>
Date: Wed, 27 Jul 2022 16:30:55 +0800
Subject: [PATCH 8/8] mapi: Improve comment about _glapi_tls_Dispatch and
 _glapi_tls_Context

Signed-off-by: Yonggang Luo <luoyonggang@gmail.com>
---
 src/mapi/u_current.c | 20 ++++++--------------
 1 file changed, 6 insertions(+), 14 deletions(-)

diff --git a/src/mapi/u_current.c b/src/mapi/u_current.c
index d0c48d89300c..ba6671214c95 100644
--- a/src/mapi/u_current.c
+++ b/src/mapi/u_current.c
@@ -72,25 +72,17 @@ extern void (*__glapi_noop_table[])(void);
  *
  * Depending on whether or not multithreading is support, and the type of
  * support available, several variables are used to store the current context
- * pointer and the current dispatch table pointer.  In the non-threaded case,
+ * pointer and the current dispatch table pointer. In the non-threaded case,
  * the variables \c _glapi_Dispatch and \c _glapi_Context are used for this
  * purpose.
  *
- * In the "normal" threaded case, the variables \c _glapi_Dispatch and
- * \c _glapi_Context will be \c NULL if an application is detected as being
- * multithreaded.  Single-threaded applications will use \c _glapi_Dispatch
- * and \c _glapi_Context just like the case without any threading support.
- * When \c _glapi_Dispatch and \c _glapi_Context are \c NULL, the thread state
- * data \c _gl_DispatchTSD and \c ContextTSD are used.  Drivers and the
+ * In multi threaded case, The TLS variables \c _glapi_tls_Dispatch and
+ * \c _glapi_tls_Context are used. Having \c _glapi_Dispatch and \c _glapi_Context
+ * be hardcoded to \c NULL maintains binary compatability between TLS enabled
+ * loaders and non-TLS DRI drivers. When \c _glapi_Dispatch and \c _glapi_Context
+ * are \c NULL, the thread state data \c ContextTSD are used. Drivers and the
  * static dispatch functions access these variables via \c _glapi_get_dispatch
  * and \c _glapi_get_context.
- *
- *
- * In the TLS case, the variables \c _glapi_Dispatch and \c _glapi_Context are
- * hardcoded to \c NULL.  Instead the TLS variables \c _glapi_tls_Dispatch and
- * \c _glapi_tls_Context are used.  Having \c _glapi_Dispatch and
- * \c _glapi_Context be hardcoded to \c NULL maintains binary compatability
- * between TLS enabled loaders and non-TLS DRI drivers.
  */
 /*@{*/
 
-- 
GitLab

