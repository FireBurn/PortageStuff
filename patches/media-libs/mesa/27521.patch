From ede84a13976987f8ef37d7d619d7ed32f0b3c451 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Thu, 8 Feb 2024 11:34:43 +0100
Subject: [PATCH 1/5] mesa/main: fix _mesa_base_tex_format for BGRA
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

This function needs the GLES fix for all APIs now. And it should also
handle the sized internal format.

Fixes: 4de62731f4d ("mesa/main: add support for EXT_texture_storage")
Reviewed-by: Marek Ol코치k <marek.olsak@amd.com>
---
 src/mesa/main/glformats.c | 14 +++-----------
 1 file changed, 3 insertions(+), 11 deletions(-)

diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 002934aab67f8..116d12e48d8d1 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -2270,21 +2270,13 @@ _mesa_base_tex_format(const struct gl_context *ctx, GLint internalFormat)
    case GL_RGBA12:
    case GL_RGBA16:
       return GL_RGBA;
+   case GL_BGRA:
+   case GL_BGRA8_EXT:
+      return GL_RGBA;
    default:
       ; /* fallthrough */
    }
 
-   /* GL_BGRA can be an internal format *only* in OpenGL ES (1.x or 2.0).
-    */
-   if (_mesa_is_gles(ctx)) {
-      switch (internalFormat) {
-      case GL_BGRA:
-         return GL_RGBA;
-      default:
-         ; /* fallthrough */
-      }
-   }
-
    if (_mesa_has_ARB_ES2_compatibility(ctx) ||
        _mesa_has_OES_framebuffer_object(ctx) ||
        _mesa_is_gles2(ctx)) {
-- 
GitLab


From 9f301f1cfaae7faa79b8897fd8b69b550cb7ca73 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Fri, 9 Feb 2024 10:19:29 +0100
Subject: [PATCH 2/5] mesa/main: mark GL_BGRA as color-renderable

The EXT_texture_format_BGRA8888-spec is quite clear that this format is
color-renderable, so let's mark it properly as such.

It should also be texture-filterable, because in the version of OpenGL
ES it was written against all texture-formats were filterable to begin
with.

While we're at it, use the non-EXT version of the enum; it's been in the
headers since OpenGL 1.2...
---
 src/mesa/main/genmipmap.c | 5 -----
 src/mesa/main/glformats.c | 6 ++++++
 2 files changed, 6 insertions(+), 5 deletions(-)

diff --git a/src/mesa/main/genmipmap.c b/src/mesa/main/genmipmap.c
index 519be2578c743..3d3b896a16cc5 100644
--- a/src/mesa/main/genmipmap.c
+++ b/src/mesa/main/genmipmap.c
@@ -87,15 +87,10 @@ _mesa_is_valid_generate_texture_mipmap_internalformat(struct gl_context *ctx,
        *  not specified with an unsized internal format from table 8.3 or a
        *  sized internal format that is both color-renderable and
        *  texture-filterable according to table 8.10."
-       *
-       * GL_EXT_texture_format_BGRA8888 adds a GL_BGRA_EXT unsized internal
-       * format, and includes it in a very similar looking table.  So we
-       * include it here as well.
        */
       return internalformat == GL_RGBA || internalformat == GL_RGB ||
              internalformat == GL_LUMINANCE_ALPHA ||
              internalformat == GL_LUMINANCE || internalformat == GL_ALPHA ||
-             internalformat == GL_BGRA_EXT ||
              (_mesa_is_es3_color_renderable(ctx, internalformat) &&
               _mesa_is_es3_texture_filterable(ctx, internalformat));
    }
diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 116d12e48d8d1..5fbcb0f3afd83 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -4027,6 +4027,9 @@ _mesa_is_es3_color_renderable(const struct gl_context *ctx,
    case GL_RGBA16_SNORM:
       return _mesa_has_EXT_texture_norm16(ctx) &&
              _mesa_has_EXT_render_snorm(ctx);
+   case GL_BGRA:
+      assert(_mesa_has_EXT_texture_format_BGRA8888(ctx));
+      return true;
    default:
       return false;
    }
@@ -4085,6 +4088,9 @@ _mesa_is_es3_texture_filterable(const struct gl_context *ctx,
        *     for the R32F, RG32F, RGB32F, and RGBA32F formats."
        */
       return _mesa_has_OES_texture_float_linear(ctx);
+   case GL_BGRA:
+      assert(_mesa_has_EXT_texture_format_BGRA8888(ctx));
+      return true;
    default:
       return false;
    }
-- 
GitLab


From 47b07ae22b2a0b56eaef9c7369c3cc1ce1351637 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Fri, 9 Feb 2024 10:22:15 +0100
Subject: [PATCH 3/5] mesa/main: mark GL_BGRA8_EXT as color-renderable

While this is not quite as clear as in the previous commit, I still
believe this is the case, but in a bit of an indirect way:

1. EXT_texture_storage defines that GL_BGRA8_EXT is allowed to be used
   in certain sitations if *either* EXT_texture_format_BGRA8888 *or*
   APPLE_texture_format_BGRA8888 is supported.

2. Surprisingly, EXT_texture_format_BGRA8888 (which we do support) does
   not even mention GL_BGRA8_EXT, only GL_BGRA_EXT.

3. APPLE_texture_format_BGRA8888 on the other hand (which we *don't*
   support) *does* introduce GL_BGRA8_EXT, and is pretty clear about it
   being intended for rendering-purposes. But it's written against GLES
   1.1 instead of GLES 2 or later, so it doesn't explicitly add it to
   the required tables.

I think the above tells us that GL_BGRA8_EXT is *supposed* to be a
color-renderable format, even if the way we currently support it is
rather underspecified.

It should also be texture-filterable, for the same reason as in the
previous commit.

In the longer run, we should probably add support for
APPLE_texture_format_BGRA8888, which would make things a bit clearer.
---
 src/mesa/main/glformats.c | 8 ++++++++
 1 file changed, 8 insertions(+)

diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 5fbcb0f3afd83..15f089cc9fcd0 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -4030,6 +4030,10 @@ _mesa_is_es3_color_renderable(const struct gl_context *ctx,
    case GL_BGRA:
       assert(_mesa_has_EXT_texture_format_BGRA8888(ctx));
       return true;
+   case GL_BGRA8_EXT:
+      assert(_mesa_has_EXT_texture_format_BGRA8888(ctx) &&
+             _mesa_has_EXT_texture_storage(ctx));
+      return true;
    default:
       return false;
    }
@@ -4091,6 +4095,10 @@ _mesa_is_es3_texture_filterable(const struct gl_context *ctx,
    case GL_BGRA:
       assert(_mesa_has_EXT_texture_format_BGRA8888(ctx));
       return true;
+   case GL_BGRA8_EXT:
+      assert(_mesa_has_EXT_texture_format_BGRA8888(ctx) &&
+             _mesa_has_EXT_texture_storage(ctx));
+      return true;
    default:
       return false;
    }
-- 
GitLab


From c270a8dbeaba54e5dcd08b208d104e239aaea0f4 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Thu, 8 Feb 2024 11:56:42 +0100
Subject: [PATCH 4/5] mesa/main: add driconf for broken chromium behavior
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Due to sloppy logic, Chromium thinks EXT_texture_storage allows using
GL_BGRA8_EXT for *any* texturing, including things like glTexSubImage2D,
which it does not.

However, this bug was introduced in Chrome back in 2016, and there's a
*lot* of installations out there. So let's give Chrome a pass for now,
and introduce a dri-conf that allows for this nonsense.

Boy, this is going to be fun once all the gazillion Electron apps out
there realizes that they're going to need to either get a fixed
Chromium, or a driconf setting... Luckily, this seems to only trigger on
Wayland for now, and most Electron apps are still stuck on X11 for now.

Also, seems Firefox has the same bug. Ugh.

Closes: https://gitlab.freedesktop.org/mesa/mesa/-/issues/10550
Reviewed-by: Marek Ol코치k <marek.olsak@amd.com>
---
 .../auxiliary/pipe-loader/driinfo_gallium.h   |  1 +
 src/gallium/auxiliary/util/u_driconf.c        |  1 +
 src/gallium/include/frontend/api.h            |  1 +
 src/mesa/main/glformats.c                     |  8 ++++++
 src/util/00-mesa-defaults.conf                | 27 +++++++++++++++++++
 src/util/driconf.h                            |  4 +++
 6 files changed, 42 insertions(+)

diff --git a/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h b/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
index f764916b6303a..4a60ea43c83ed 100644
--- a/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
+++ b/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
@@ -58,6 +58,7 @@ DRI_CONF_SECTION_DEBUG
    DRI_CONF_KEEP_NATIVE_WINDOW_GLX_DRAWABLE(false)
    DRI_CONF_IGNORE_DISCARD_FRAMEBUFFER(false)
    DRI_CONF_ALLOW_MULTISAMPLED_COPYTEXIMAGE(false)
+   DRI_CONF_ALLOW_BGRA8_INTERNALFORMAT(false)
 DRI_CONF_SECTION_END
 
 DRI_CONF_SECTION_MISCELLANEOUS
diff --git a/src/gallium/auxiliary/util/u_driconf.c b/src/gallium/auxiliary/util/u_driconf.c
index 165de18b131c3..c7393eb646a00 100644
--- a/src/gallium/auxiliary/util/u_driconf.c
+++ b/src/gallium/auxiliary/util/u_driconf.c
@@ -75,6 +75,7 @@ u_driconf_fill_st_options(struct st_config_options *options,
    query_string_option(force_gl_renderer);
    query_string_option(mesa_extension_override);
    query_bool_option(allow_multisampled_copyteximage);
+   query_bool_option(allow_bgra8_internalformat);
 
    driComputeOptionsSha1(optionCache, options->config_options_sha1);
 }
diff --git a/src/gallium/include/frontend/api.h b/src/gallium/include/frontend/api.h
index 712cbe9e47e97..d869cc6a7fdca 100644
--- a/src/gallium/include/frontend/api.h
+++ b/src/gallium/include/frontend/api.h
@@ -204,6 +204,7 @@ struct st_config_options
    char *force_gl_renderer;
    char *mesa_extension_override;
    bool allow_multisampled_copyteximage;
+   bool allow_bgra8_internalformat;
 
    unsigned char config_options_sha1[20];
 };
diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index 15f089cc9fcd0..dbaa28b878202 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -2900,6 +2900,13 @@ _mesa_gles_check_internalformat(const struct gl_context *ctx,
       if (!_mesa_is_gles3(ctx))
          return GL_INVALID_VALUE;
       return GL_NO_ERROR;
+
+   case GL_BGRA8_EXT:
+      if (ctx->st_opts->allow_bgra8_internalformat)
+         return GL_NO_ERROR;
+      else
+         return GL_INVALID_VALUE;
+
    default:
       return GL_INVALID_VALUE;
    }
@@ -2980,6 +2987,7 @@ _mesa_gles_error_check_format_and_type(const struct gl_context *ctx,
       if (type != GL_UNSIGNED_BYTE ||
               (internalFormat != GL_BGRA &&
                internalFormat != GL_RGBA8 &&
+               internalFormat != GL_BGRA8_EXT &&
                internalFormat != GL_SRGB8_ALPHA8))
          return GL_INVALID_OPERATION;
       break;
diff --git a/src/util/00-mesa-defaults.conf b/src/util/00-mesa-defaults.conf
index 521ea9321ad31..6e6e217e0b59f 100644
--- a/src/util/00-mesa-defaults.conf
+++ b/src/util/00-mesa-defaults.conf
@@ -839,6 +839,33 @@ TODO: document the other workarounds.
             <option name="v3d_nonmsaa_texture_size_limit" value="true" />
         </application>
 
+        <!-- Work-around for broken Chromium -->
+        <application name="Chromium" executable="chromium">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Google Chrome" executable="chrome">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Brave" executable="brave">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Vivaldi" executable="vivaldi-bin">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Thorium" executable="thorium">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Heroic Games Launcher" executable="heroic">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <!-- Firefox too, it seems :( -->
+        <application name="Firefox" executable="firefox">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+        <application name="Firefox ESR" executable="firefox-esr">
+            <option name="allow_bgra8_internalformat" value="true" />
+        </application>
+
         <application name="gfxbench" executable="testfw_app">
             <option name="mesa_glthread_app_profile" value="0" />
             <option name="vk_x11_override_min_image_count" value="2" />
diff --git a/src/util/driconf.h b/src/util/driconf.h
index 837e354107588..5948e503f902e 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -485,6 +485,10 @@
    DRI_CONF_OPT_B(allow_multisampled_copyteximage, def, \
                   "Allow CopyTexSubImage and other to copy sampled framebuffer")
 
+#define DRI_CONF_ALLOW_BGRA8_INTERNALFORMAT(def) \
+   DRI_CONF_OPT_B(allow_bgra8_internalformat, def, \
+                  "Allow TexImage and others to use BGRA8 internal formats")
+
 #define DRI_CONF_NO_FP16(def) \
    DRI_CONF_OPT_B(no_fp16, def, \
                   "Disable 16-bit float support")
-- 
GitLab


From ac782821a42ab9d5c11138a26f064cc7e1acaae1 Mon Sep 17 00:00:00 2001
From: Erik Faye-Lund <erik.faye-lund@collabora.com>
Date: Fri, 9 Feb 2024 17:33:16 +0100
Subject: [PATCH 5/5] squashme: mesa/main: always accept GL_BGRA8_EXT, but
 complain about it

---
 .../auxiliary/pipe-loader/driinfo_gallium.h   |  1 -
 src/gallium/auxiliary/util/u_driconf.c        |  1 -
 src/gallium/include/frontend/api.h            |  1 -
 src/mesa/main/glformats.c                     | 20 +++++++++-----
 src/mesa/main/glformats.h                     |  2 +-
 src/util/00-mesa-defaults.conf                | 27 -------------------
 src/util/driconf.h                            |  4 ---
 7 files changed, 15 insertions(+), 41 deletions(-)

diff --git a/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h b/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
index 4a60ea43c83ed..f764916b6303a 100644
--- a/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
+++ b/src/gallium/auxiliary/pipe-loader/driinfo_gallium.h
@@ -58,7 +58,6 @@ DRI_CONF_SECTION_DEBUG
    DRI_CONF_KEEP_NATIVE_WINDOW_GLX_DRAWABLE(false)
    DRI_CONF_IGNORE_DISCARD_FRAMEBUFFER(false)
    DRI_CONF_ALLOW_MULTISAMPLED_COPYTEXIMAGE(false)
-   DRI_CONF_ALLOW_BGRA8_INTERNALFORMAT(false)
 DRI_CONF_SECTION_END
 
 DRI_CONF_SECTION_MISCELLANEOUS
diff --git a/src/gallium/auxiliary/util/u_driconf.c b/src/gallium/auxiliary/util/u_driconf.c
index c7393eb646a00..165de18b131c3 100644
--- a/src/gallium/auxiliary/util/u_driconf.c
+++ b/src/gallium/auxiliary/util/u_driconf.c
@@ -75,7 +75,6 @@ u_driconf_fill_st_options(struct st_config_options *options,
    query_string_option(force_gl_renderer);
    query_string_option(mesa_extension_override);
    query_bool_option(allow_multisampled_copyteximage);
-   query_bool_option(allow_bgra8_internalformat);
 
    driComputeOptionsSha1(optionCache, options->config_options_sha1);
 }
diff --git a/src/gallium/include/frontend/api.h b/src/gallium/include/frontend/api.h
index d869cc6a7fdca..712cbe9e47e97 100644
--- a/src/gallium/include/frontend/api.h
+++ b/src/gallium/include/frontend/api.h
@@ -204,7 +204,6 @@ struct st_config_options
    char *force_gl_renderer;
    char *mesa_extension_override;
    bool allow_multisampled_copyteximage;
-   bool allow_bgra8_internalformat;
 
    unsigned char config_options_sha1[20];
 };
diff --git a/src/mesa/main/glformats.c b/src/mesa/main/glformats.c
index dbaa28b878202..28d7b99843363 100644
--- a/src/mesa/main/glformats.c
+++ b/src/mesa/main/glformats.c
@@ -2745,7 +2745,7 @@ gles_effective_internal_format_for_format_and_type(GLenum format,
  * are required for complete checking between format and type.
  */
 static GLenum
-_mesa_gles_check_internalformat(const struct gl_context *ctx,
+_mesa_gles_check_internalformat(struct gl_context *ctx,
                                 GLenum internalFormat)
 {
    switch (internalFormat) {
@@ -2902,10 +2902,18 @@ _mesa_gles_check_internalformat(const struct gl_context *ctx,
       return GL_NO_ERROR;
 
    case GL_BGRA8_EXT:
-      if (ctx->st_opts->allow_bgra8_internalformat)
-         return GL_NO_ERROR;
-      else
-         return GL_INVALID_VALUE;
+      /* This is technically speaking out-of-spec. But too many
+       * applications seems to depend on it, so let's allow it
+       * together with a small complaint */
+      static bool warned = false;
+      if (!warned) {
+         _mesa_warning(ctx,
+            "internalformat = GL_BGRA8_EXT invalid by spec, but too many "
+            "applications depend on it to error. Plese fix the software "
+            "that causes this problem.");
+         warned = true;
+      }
+      return GL_NO_ERROR;
 
    default:
       return GL_INVALID_VALUE;
@@ -2918,7 +2926,7 @@ _mesa_gles_check_internalformat(const struct gl_context *ctx,
  * \return error code, or GL_NO_ERROR.
  */
 GLenum
-_mesa_gles_error_check_format_and_type(const struct gl_context *ctx,
+_mesa_gles_error_check_format_and_type(struct gl_context *ctx,
                                        GLenum format, GLenum type,
                                        GLenum internalFormat)
 {
diff --git a/src/mesa/main/glformats.h b/src/mesa/main/glformats.h
index a402a835962e9..391898d64e768 100644
--- a/src/mesa/main/glformats.h
+++ b/src/mesa/main/glformats.h
@@ -139,7 +139,7 @@ _mesa_es_error_check_format_and_type(const struct gl_context *ctx,
                                      unsigned dimensions);
 
 extern GLenum
-_mesa_gles_error_check_format_and_type(const struct gl_context *ctx,
+_mesa_gles_error_check_format_and_type(struct gl_context *ctx,
                                        GLenum format, GLenum type,
                                        GLenum internalFormat);
 extern GLint
diff --git a/src/util/00-mesa-defaults.conf b/src/util/00-mesa-defaults.conf
index 6e6e217e0b59f..521ea9321ad31 100644
--- a/src/util/00-mesa-defaults.conf
+++ b/src/util/00-mesa-defaults.conf
@@ -839,33 +839,6 @@ TODO: document the other workarounds.
             <option name="v3d_nonmsaa_texture_size_limit" value="true" />
         </application>
 
-        <!-- Work-around for broken Chromium -->
-        <application name="Chromium" executable="chromium">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Google Chrome" executable="chrome">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Brave" executable="brave">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Vivaldi" executable="vivaldi-bin">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Thorium" executable="thorium">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Heroic Games Launcher" executable="heroic">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <!-- Firefox too, it seems :( -->
-        <application name="Firefox" executable="firefox">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-        <application name="Firefox ESR" executable="firefox-esr">
-            <option name="allow_bgra8_internalformat" value="true" />
-        </application>
-
         <application name="gfxbench" executable="testfw_app">
             <option name="mesa_glthread_app_profile" value="0" />
             <option name="vk_x11_override_min_image_count" value="2" />
diff --git a/src/util/driconf.h b/src/util/driconf.h
index 5948e503f902e..837e354107588 100644
--- a/src/util/driconf.h
+++ b/src/util/driconf.h
@@ -485,10 +485,6 @@
    DRI_CONF_OPT_B(allow_multisampled_copyteximage, def, \
                   "Allow CopyTexSubImage and other to copy sampled framebuffer")
 
-#define DRI_CONF_ALLOW_BGRA8_INTERNALFORMAT(def) \
-   DRI_CONF_OPT_B(allow_bgra8_internalformat, def, \
-                  "Allow TexImage and others to use BGRA8 internal formats")
-
 #define DRI_CONF_NO_FP16(def) \
    DRI_CONF_OPT_B(no_fp16, def, \
                   "Disable 16-bit float support")
-- 
GitLab

