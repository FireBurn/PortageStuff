From 8d4dfb5e0a78ca65f9bd4d69fc013c429f98fa83 Mon Sep 17 00:00:00 2001
From: Zebediah Figura <z.figura12@gmail.com>
Date: Thu, 28 Jan 2021 16:21:09 -0300
Subject: [PATCH] ntdll, server: Add support for the experimental futex2
 interface.

---
 dlls/ntdll/unix/fsync.c | 141 +++++++++++++++++++++++++++-------------
 server/fsync.c          |  35 ++++++++--
 2 files changed, 125 insertions(+), 51 deletions(-)

diff --git a/dlls/ntdll/unix/fsync.c b/dlls/ntdll/unix/fsync.c
index 049f287d1d..d2d5ae01d2 100644
--- a/dlls/ntdll/unix/fsync.c
+++ b/dlls/ntdll/unix/fsync.c
@@ -77,23 +77,68 @@ static inline void small_pause(void)
 #endif
 }
 
-static inline int futex_wait_multiple( const struct futex_wait_block *futexes,
-        int count, const struct timespec *timeout )
+/* futex2 experimental interface */
+
+static long nr_futex2_wait, nr_futex2_waitv, nr_futex2_wake;
+
+#define FUTEX_32 2
+#define FUTEX_SHARED_FLAG 8
+
+struct futex_waitv
 {
-    return syscall( __NR_futex, futexes, 31, count, timeout, 0, 0 );
-}
+    void *uaddr;
+    unsigned int val;
+    unsigned int flags;
+};
 
-static inline int futex_wake( int *addr, int val )
+static unsigned int spincount = 100;
+
+static inline int futex_wake( int *addr, int count )
 {
-    return syscall( __NR_futex, addr, 1, val, NULL, 0, 0 );
+    if (nr_futex2_wake)
+        return syscall( nr_futex2_wake, addr, count, FUTEX_32 | FUTEX_SHARED_FLAG );
+    return syscall( __NR_futex, addr, 1, count, NULL, 0, 0 );
 }
 
 static inline int futex_wait( int *addr, int val, struct timespec *timeout )
 {
+    if (nr_futex2_wait)
+        return syscall( nr_futex2_wait, addr, val, FUTEX_32 | FUTEX_SHARED_FLAG, timeout );
     return syscall( __NR_futex, addr, 0, val, timeout, 0, 0 );
 }
 
-static unsigned int spincount = 100;
+union futex_vector
+{
+    struct futex_wait_block futex[MAXIMUM_WAIT_OBJECTS + 1];
+    struct futex_waitv futex2[MAXIMUM_WAIT_OBJECTS + 1];
+};
+
+static inline void futex_vector_set( union futex_vector *vector, unsigned int index, int *addr, int val )
+{
+    if (nr_futex2_waitv)
+    {
+        vector->futex2[index].uaddr = addr;
+        vector->futex2[index].val = val;
+        vector->futex2[index].flags = FUTEX_32 | FUTEX_SHARED_FLAG;
+    }
+    else
+    {
+        vector->futex[index].addr = addr;
+        vector->futex[index].val = val;
+#if __SIZEOF_POINTER__ == 4
+        vector->futex[index].pad = 0;
+#endif
+        vector->futex[index].bitset = ~0;
+    }
+}
+
+static inline int futex_wait_multiple( union futex_vector *vector,
+        unsigned int count, const struct timespec *timeout )
+{
+    if (nr_futex2_waitv)
+        return syscall( nr_futex2_waitv, &vector->futex2, count, 0, timeout );
+    return syscall( __NR_futex, &vector->futex, 31, count, timeout, 0, 0 );
+}
 
 int do_fsync(void)
 {
@@ -102,9 +147,35 @@ int do_fsync(void)
 
     if (do_fsync_cached == -1)
     {
-        static const struct timespec zero;
-        futex_wait_multiple( NULL, 0, &zero );
-        do_fsync_cached = getenv("WINEFSYNC") && atoi(getenv("WINEFSYNC")) && errno != ENOSYS;
+        FILE *f;
+
+        if ((f = fopen( "/sys/kernel/futex2/wait", "r" )))
+        {
+            char buffer[13];
+
+            fgets( buffer, sizeof(buffer), f );
+            nr_futex2_wait = atoi( buffer );
+            fclose(f);
+
+            f = fopen( "/sys/kernel/futex2/waitv", "r" );
+            fgets( buffer, sizeof(buffer), f );
+            nr_futex2_waitv = atoi( buffer );
+            fclose(f);
+
+            f = fopen( "/sys/kernel/futex2/wake", "r" );
+            fgets( buffer, sizeof(buffer), f );
+            nr_futex2_wake = atoi( buffer );
+            fclose(f);
+
+            do_fsync_cached = 1;
+        }
+        else
+        {
+            static const struct timespec zero;
+            futex_wait_multiple( NULL, 0, &zero );
+            do_fsync_cached = (errno != ENOSYS);
+        }
+        do_fsync_cached = getenv("WINEFSYNC") && atoi(getenv("WINEFSYNC")) && do_fsync_cached;
         if (getenv("WINEFSYNC_SPINCOUNT"))
             spincount = atoi(getenv("WINEFSYNC_SPINCOUNT"));
     }
@@ -664,19 +735,13 @@ static NTSTATUS do_single_wait( int *addr, int val, ULONGLONG *end, BOOLEAN aler
     if (alertable)
     {
         int *apc_futex = ntdll_get_thread_data()->fsync_apc_futex;
-        struct futex_wait_block futexes[2];
+        union futex_vector futexes;
 
         if (__atomic_load_n( apc_futex, __ATOMIC_SEQ_CST ))
             return STATUS_USER_APC;
 
-        futexes[0].addr = addr;
-        futexes[0].val = val;
-        futexes[1].addr = apc_futex;
-        futexes[1].val = 0;
-#if __SIZEOF_POINTER__ == 4
-        futexes[0].pad = futexes[1].pad = 0;
-#endif
-        futexes[0].bitset = futexes[1].bitset = ~0;
+        futex_vector_set( &futexes, 0, addr, val );
+        futex_vector_set( &futexes, 1, apc_futex, 0 );
 
         if (end)
         {
@@ -684,10 +749,10 @@ static NTSTATUS do_single_wait( int *addr, int val, ULONGLONG *end, BOOLEAN aler
             struct timespec tmo_p;
             tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
             tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
-            ret = futex_wait_multiple( futexes, 2, &tmo_p );
+            ret = futex_wait_multiple( &futexes, 2, &tmo_p );
         }
         else
-            ret = futex_wait_multiple( futexes, 2, NULL );
+            ret = futex_wait_multiple( &futexes, 2, NULL );
 
         if (__atomic_load_n( apc_futex, __ATOMIC_SEQ_CST ))
             return STATUS_USER_APC;
@@ -719,9 +784,9 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
 {
     static const LARGE_INTEGER zero = {0};
 
-    struct futex_wait_block futexes[MAXIMUM_WAIT_OBJECTS + 1];
     struct fsync *objs[MAXIMUM_WAIT_OBJECTS];
     int has_fsync = 0, has_server = 0;
+    union futex_vector futexes;
     BOOL msgwait = FALSE;
     int dummy_futex = 0;
     unsigned int spin;
@@ -849,8 +914,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             small_pause();
                         }
 
-                        futexes[i].addr = &semaphore->count;
-                        futexes[i].val = 0;
+                        futex_vector_set( &futexes, i, &semaphore->count, 0 );
                         break;
                     }
                     case FSYNC_MUTEX:
@@ -882,8 +946,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             small_pause();
                         }
 
-                        futexes[i].addr = &mutex->tid;
-                        futexes[i].val  = tid;
+                        futex_vector_set( &futexes, i, &mutex->tid, tid );
                         break;
                     }
                     case FSYNC_AUTO_EVENT:
@@ -901,8 +964,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             small_pause();
                         }
 
-                        futexes[i].addr = &event->signaled;
-                        futexes[i].val = 0;
+                        futex_vector_set( &futexes, i, &event->signaled, 0 );
                         break;
                     }
                     case FSYNC_MANUAL_EVENT:
@@ -921,8 +983,7 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                             small_pause();
                         }
 
-                        futexes[i].addr = &event->signaled;
-                        futexes[i].val = 0;
+                        futex_vector_set( &futexes, i, &event->signaled, 0 );
                         break;
                     }
                     default:
@@ -933,26 +994,14 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                 else
                 {
                     /* Avoid breaking things entirely. */
-                    futexes[i].addr = &dummy_futex;
-                    futexes[i].val = dummy_futex;
+                    futex_vector_set( &futexes, i, &dummy_futex, dummy_futex );
                 }
-
-#if __SIZEOF_POINTER__ == 4
-                futexes[i].pad = 0;
-#endif
-                futexes[i].bitset = ~0;
             }
 
             if (alertable)
             {
                 /* We already checked if it was signaled; don't bother doing it again. */
-                futexes[i].addr = ntdll_get_thread_data()->fsync_apc_futex;
-                futexes[i].val = 0;
-#if __SIZEOF_POINTER__ == 4
-                futexes[i].pad = 0;
-#endif
-                futexes[i].bitset = ~0;
-                i++;
+                futex_vector_set( &futexes, i++, ntdll_get_thread_data()->fsync_apc_futex, 0 );
             }
             waitcount = i;
 
@@ -972,10 +1021,10 @@ static NTSTATUS __fsync_wait_objects( DWORD count, const HANDLE *handles,
                 tmo_p.tv_sec = timeleft / (ULONGLONG)TICKSPERSEC;
                 tmo_p.tv_nsec = (timeleft % TICKSPERSEC) * 100;
 
-                ret = futex_wait_multiple( futexes, waitcount, &tmo_p );
+                ret = futex_wait_multiple( &futexes, waitcount, &tmo_p );
             }
             else
-                ret = futex_wait_multiple( futexes, waitcount, NULL );
+                ret = futex_wait_multiple( &futexes, waitcount, NULL );
 
             /* FUTEX_WAIT_MULTIPLE can succeed or return -EINTR, -EAGAIN,
              * -EFAULT/-EACCES, -ETIMEDOUT. In the first three cases we need to
diff --git a/server/fsync.c b/server/fsync.c
index 39a4e7a1d1..6268c1c189 100644
--- a/server/fsync.c
+++ b/server/fsync.c
@@ -63,6 +63,13 @@ static inline int futex_wait_multiple( const struct futex_wait_block *futexes,
     return syscall( __NR_futex, futexes, 31, count, timeout, 0, 0 );
 }
 
+/* futex2 experimental interface */
+
+static long nr_futex2_wake;
+
+#define FUTEX_32 2
+#define FUTEX_SHARED_FLAG 8
+
 int do_fsync(void)
 {
 #ifdef __linux__
@@ -70,9 +77,25 @@ int do_fsync(void)
 
     if (do_fsync_cached == -1)
     {
-        static const struct timespec zero;
-        futex_wait_multiple( NULL, 0, &zero );
-        do_fsync_cached = getenv("WINEFSYNC") && atoi(getenv("WINEFSYNC")) && errno != ENOSYS;
+        FILE *f;
+
+        if ((f = fopen( "/sys/kernel/futex2/wake", "r" )))
+        {
+            char buffer[13];
+
+            fgets( buffer, sizeof(buffer), f );
+            nr_futex2_wake = atoi( buffer );
+            fclose(f);
+
+            do_fsync_cached = 1;
+        }
+        else
+        {
+            static const struct timespec zero;
+            futex_wait_multiple( NULL, 0, &zero );
+            do_fsync_cached = (errno != ENOSYS);
+        }
+        do_fsync_cached = getenv("WINEFSYNC") && atoi(getenv("WINEFSYNC")) && do_fsync_cached;
     }
 
     return do_fsync_cached;
@@ -327,9 +350,11 @@ struct fsync *create_fsync( struct object *root, const struct unicode_str *name,
 #endif
 }
 
-static inline int futex_wake( int *addr, int val )
+static inline int futex_wake( int *addr, int count )
 {
-    return syscall( __NR_futex, addr, 1, val, NULL, 0, 0 );
+    if (nr_futex2_wake)
+        return syscall( nr_futex2_wake, addr, count, FUTEX_32 | FUTEX_SHARED_FLAG );
+    return syscall( __NR_futex, addr, 1, count, NULL, 0, 0 );
 }
 
 /* shm layout for events or event-like objects. */
-- 
GitLab

